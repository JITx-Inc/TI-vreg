#use-added-syntax(jitx)
defpackage TI-vreg/components/TPS6208x :
  import core
  import math
  import jitx
  import jitx/commands

  import jsl/symbols
  import jsl/landpatterns
  import jsl/design/introspection
  import power-systems

public pcb-enum TI-vreg/components/TPS6208x/TPS6208x-PN:
  TPS62080DSG
  TPS62081DSG
  TPS62082DSG
  TPS62080ADSG


public pcb-component component (pn:TPS6208x-PN):

  manufacturer = "Texas Instruments"
  mpn = to-string(pn)
  datasheet = "https://www.ti.com/lit/ds/symlink/tps62080.pdf"
  reference-prefix = "U"

  property(self.adjustable) = switch(pn):
    TPS62080DSG: true
    TPS62080ADSG: true
    else: false

  pin-properties:
    [pin:Ref | pads:Int ... | side:Dir | row:Int ]
    [ VIN    | 8            | Left     | 0 ]
    [ EN     | 1            | Left     | 0 ]

    [ MODE   | 3            | Left     | 0 ]
    [ GND    | 2            | Left     | 1]
    [ EPAD   | 9            | Left     | 1]

    [ VOS    | 5            | Right    | 0 ]
    [ SW     | 7            | Right    | 0 ]
    [ FB     | 4            | Right    | 1 ]
    [ PG     | 6            | Right    | 1]

  val box = BoxSymbol(self)

  set-grid(box, [2,2])

  add-decorator(box, self.PG, OpenCollectorDecorator())

  val card-size = Dims(0.4, 0.3)
  add-decorator(box, self.EN, CardinalityDecorator(InputPin, size = card-size))
  add-decorator(box, self.MODE, CardinalityDecorator(InputPin, size = card-size))

  assign-symbol $ create-symbol(box)

  val pkg = SON(
    num-leads = 8,
    lead-profile = Lead-Profile(
      span = min-max(1.9, 2.1),
      pitch = 0.5,
      lead = SON-Lead(
        length = min-max(0.2, 0.4),
        width = min-max(0.18, 0.32)
      )
    ),
    thermal-lead? = Rectangle(0.9, 1.6),
    package-body = PackageBody(
      width = min-max(1.9, 2.1)
      length = min-max(1.9, 2.1)
      height = min-max(0.7, 0.8)
    )
  )

  assign-landpattern $ create-landpattern(pkg)

  property(self.Vin-MAX) = 6.0
  property(self.Vin-MIN) = 2.3

  property(self.V-REF) = min-typ-max(0.438, 0.45, 0.462) ; Volts
  property(self.I-REF) = typ-max(10.0e-9, 100.0e-9) ; Amps

  property(self.R-Discharge) = switch(pn):
    TPS62080ADSG: min-typ-max(25.0, 40.0, 65.0)
    else: typ(1.0e3)

  property(self.I-LIM) = min-typ-max(1.6, 2.8, 4.0)

  property(self.Vout-MAX) = 4.0
  property(self.Vout-MIN) = 0.5

public defn MFR-Suggested-Solution () -> BuckSolution:
  ; See datasheet section 9.2.2.2
  BuckSolution(L = 1.0e-6, C-in = 10.0e-6, C-out = 22.0e-6)

public pcb-module device (pn:TPS6208x-PN -- snooze-mode:True|False, snooze-conn?:Maybe<Instantiable> = None()):

  public inst SW : component(pn)
  net GND (SW.GND, SW.EPAD)

  ; This port is primarily a tool for using the
  ;  Buck Converter Generator functions.
  port buck : buck-converter([])
  ; Connect to the buck bundle
  connect-buck-converter(self.buck, SW.VIN, SW.GND, SW.SW, SW.FB)

  ; Pull the MODE up or down
  ;   depending on the status of snooze
  val snooze-ep = if snooze-mode: SW.VIN
  else: GND

  match(snooze-conn?):
    (_:None): net (SW.MODE, snooze-ep)
    (given:One<Instantiable>):
      val pull-type = value(given)
      inst pull : pull-type
      val [p1, p2] = get-element-ports(pull)
      net (SW.MODE, p1)
      net (p2, snooze-ep)
